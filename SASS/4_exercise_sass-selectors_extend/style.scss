// SASS fourth exercise

// **************** MANTENIMIENTO **************** //
*,
*::before,
*::after {
  box-sizing: border-box;
  margin: 0;
}
:root {
  // borders colors:
  --border-red: red;
  --border-green: green;
  --border-violet: blueviolet;

  // letters colors:
  --letter-blue: blue;
  --letter-red: red;
  --letter-green: green;

  // underlines colors:
  --underline-color: gray;
}

// @functions utils:

// declaro una variable con el valor de 1rem en px (16px)
$valor-de-un-rem: 16px;
// función para calcular el valor de píxeles en rem con dos parámetros, los px y el valor de un rem (que son 16px)
@function calculate_rem($cantidad-px, $valor-de-un-rem) {
  // almaceno la division en la variable [$result], utilizo la función [calc()] para hacer la división entre los dos parámetros [$cantidad-px / $valor-de-un-rem] y después le agrego el [+ rem] para que me añada al resultado numérico, la unidad de medida que deseo utilizar. De esta forma sea el scss y que el css interpretarán correctamente la medida que deseo utilizar porque la división me da unicamente resultado numérico sin su unidad de medida y scss o css no trabajan correctamente sin unidades de medida
  $result: calc($cantidad-px / $valor-de-un-rem) + rem;
  // el @debug más el inspect() nos muestra el resultado utilizando este código en la terminal: sass --watch <"input".scss:"output".css --trace> Esto mostrará mensajes de depuración, incluidos los valores de variables y otras salidas relacionadas en la consola mientras el archivo Sass se está compilando
  @debug "El resultado es: #{inspect($result)}";
  // nos devuelve la variable $result
  @return $result;
}

// @mixins utils:

@mixin body {
  display: flex;
  justify-content: center;
  align-items: center;
  margin: 0;
  width: 100vw;
  min-height: 100vh;
  padding: 0px;
  font-size: calculate_rem(16px, $valor-de-un-rem); // 1rem;
  font-family: system-ui, -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto,
    Oxygen, Ubuntu, Cantarell, "Open Sans", "Helvetica Neue", sans-serif;
}
@mixin lienzo-principal() {
  display: flex;
  flex-flow: column wrap;
  justify-content: center;
  align-items: center;
  width: 80%;
  height: 60vh;
  padding: calculate_rem(20px, $valor-de-un-rem); // 1.25rem;
  border: solid 3px var(--border-red);
}
@mixin h1 {
  color: var(--letter-green);
  font-size: calculate_rem(28px, $valor-de-un-rem); // 1.75rem;
  -moz-text-decoration-color: var(--underline-color);
  -moz-text-decoration-line: underline;
  -moz-text-decoration-style: solid 3px;
  text-decoration: underline var(--underline-color) solid 3px;
}
@mixin article-container {
  display: flex;
  flex-flow: row wrap;
  justify-content: center;
  align-items: center;
  text-align: center;
  height: 35%;
}
@mixin center-writing {
  display: flex;
  flex-flow: row wrap;
  -ms-flex-flow: row wrap;
  justify-content: center;
  width: 25%;
  height: 85%;
}
@mixin p($color, $border-color) {
  display: flex;
  align-items: center;
  color: $color;
  border: solid 3px $border-color;
  padding: calculate_rem(20px, $valor-de-un-rem); // 0.625rem;
  text-align: center;
}
@mixin ultimo-box-grande($color, $border-color, $font-size) {
  display: flex;
  color: $color;
  border: solid 3px $border-color;
  text-align: center;
  justify-content: center;
  align-items: center;
  font-weight: 400;
  font-size: $font-size;
  height: 50%;
}

// selectors utils:

%h2 {
  color: var(--letter-green);
  font-size: calculate_rem(28px, $valor-de-un-rem); // 1.75rem;
  margin: calculate_rem(16px, $valor-de-un-rem); // 1rem;
  text-decoration: underline var(--underline-color) solid 3px;
  border: solid 3px var(--border-red);
  padding: calculate_rem(16px, $valor-de-un-rem); // 1rem;
}

// **************** PAGINA **************** //
body {
  @include body;

  > div.lienzo-y-border-red {
    @include lienzo-principal;

    & h1 {
      @include h1;
      + h2 {
        @extend %h2;
      }
    }

    > section.article-container1 {
      @include article-container;

      > article.p {
        @include center-writing;

        > p.inside-mini-box1 {
          @include p(var(--letter-red), var(--border-green));
        }
        > p.inside-mini-box2 {
          @include p(var(--letter-blue), var(--border-green));
        }
        > p.inside-mini-box3 {
          @include p(var(--letter-red), var(--border-green));
        }
        > p.inside-mini-box4 {
          @include p(var(--letter-blue), var(--border-green));
        }
      }
      + section.article-container2 {
        @include article-container;

        > article.p-ultimo-box {
          @include ultimo-box-grande(
            var(--letter-green),
            var(--border-violet),
            calculate_rem(24px, $valor-de-un-rem)
          );
        }
      }
    }
  }
}

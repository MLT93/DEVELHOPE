// SASS fourth exercise

// **************** MANTENIMIENTO **************** //
*,
*::before,
*::after {
  box-sizing: border-box;
  margin: 0;
}
:root {
  // borders colors:
  --border-red: red;
  --border-green: green;
  --border-violet: blueviolet;

  // letters colors:
  --letter-blue: blue;
  --letter-red: red;
  --letter-green: green;

  // underlines colors:
  --underline-color: gray;
}

// @FUNCTION UTILS:

// declaro una variable con el valor de 1rem en px (16px)
$valor-de-un-rem: 16px;
// función para calcular el valor de píxeles en rem con dos parámetros, los px y el valor de un rem (que son 16px)
@function calculate_rem($cantidad-px, $valor-de-un-rem) {
  // almaceno la division en la variable [$result], utilizo la función [calc()] para hacer la división entre los dos parámetros [$cantidad-px / $valor-de-un-rem] y después le agrego el [+ rem] para que me añada al resultado numérico, la unidad de medida que deseo utilizar. De esta forma sea el scss y que el css interpretarán correctamente la medida que deseo utilizar porque la división me da unicamente resultado numérico sin su unidad de medida y scss o css no trabajan correctamente sin unidades de medida
  $result: calc($cantidad-px / $valor-de-un-rem) + rem;
  // el @debug más el inspect() nos muestra el resultado utilizando este código en la terminal: sass --watch <"input".scss:"output".css --trace> Esto mostrará mensajes de depuración, incluidos los valores de variables y otras salidas relacionadas en la consola mientras el archivo Sass se está compilando
  @debug "El resultado es: #{inspect($result)}";
  // nos devuelve la variable $result
  @return $result;
}

// @EXTEND UTILS (selectors -> classes and %text):

.body {
  display: flex;
  justify-content: center;
  align-items: center;
  margin: 0;
  width: 100vw;
  min-height: 100vh;
  padding: 0px;
  font-size: calculate_rem(16px, $valor-de-un-rem); // 1rem;
  font-family: system-ui, -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto,
    Oxygen, Ubuntu, Cantarell, "Open Sans", "Helvetica Neue", sans-serif;
}
.lienzo-principal {
  display: flex;
  flex-flow: column nowrap;
  justify-content: space-between;
  align-items: center;
  width: 90%;
  height: 60vh;
  padding: calculate_rem(18px, $valor-de-un-rem); // 1.5rem;
  border: solid 2px var(--border-red);
}
.h1 {
  color: var(--letter-green);
  font-size: calculate_rem(28px, $valor-de-un-rem); // 1.75rem;
  text-decoration: underline var(--underline-color) solid 3px;
}
%h2 {
  color: var(--letter-green);
  font-size: calculate_rem(28px, $valor-de-un-rem); // 1.75rem;
  margin: calculate_rem(16px, $valor-de-un-rem); // 1rem;
  text-decoration: underline var(--underline-color) solid 3px;
  border: solid 2px var(--border-red);
  padding: calculate_rem(16px, $valor-de-un-rem); // 1rem;
}
.article-container {
  display: flex;
  flex-flow: row wrap;
  justify-content: space-between;
  align-items: center;
  text-align: center;
  height: auto;
  width: 100%;
}
.center-writing {
  display: flex;
  flex-flow: row wrap;
  -ms-flex-flow: row wrap;
  justify-content: center;
  width: 25%;
  height: 100%;
}
.linea-de-cajitas {
  display: flex;
  flex-flow: row wrap;
  border: 2px red solid;
  width: calculate_rem(45px, $valor-de-un-rem); // 2.8125rem;
  height: calculate_rem(45px, $valor-de-un-rem); // 2.8125rem;
}
.ultimo-box-grande {
  display: flex;
  flex-flow: row wrap;
  color: var(--letter-green);
  border: solid 2px var(--border-violet);
  text-align: center;
  justify-content: center;
  align-items: center;
  font-weight: 400;
  font-size: calculate_rem(24px, $valor-de-un-rem); // 1.5rem;
  height: 100%;
  width: 100%;
  padding: calculate_rem(40px, $valor-de-un-rem); // 2.5rem;
}

//  @MIXIN UTILS:

@mixin p($color, $border-color) {
  display: flex;
  align-items: center;
  color: $color;
  border: solid 3px $border-color;
  padding: calculate_rem(20px, $valor-de-un-rem); // 0.625rem;
  text-align: center;
}

// LOOP UTILS:

// creo una lista para recorrer los números de mis clases .fs-1rem, .fs-2rem, .fs-3rem Con esto crearé una lista de números con la cual puedo trabajar
$fs-size: 1, 2, 3;

// cero una variable con el valor que necesite para poder redimensionar los números que se encuentren en las iteraciones de la lista, por si fueran muy grandes, pequeños o simplemente por si necesito una escala específica
$base-start-i: 0.78;

// indice del bucle ($i), dentro de la lista ($fs-size)
@each $i in $fs-size {

  // La variable ($font) albergará el resultado de cada iteración dentro de la lista. En este caso, será 1, 2, 3
  $font: index($fs-size, $i);

  // Nueva variable donde interpolo los números que encuentra el índice [$i] en su recorrido por la lista [$fs-size] y se los asigno dentro como nombre de la class [.fs-1rem, .fs-2rem, .fs-3rem] en los elementos dentro del html. Cuando correspondan los nombres con el recorrido del bucle, cambiará el font-size
  .fs-#{$i}rem {

    // convierto mi font-size a la unidad de medida rem, multiplicándolo [$font] por mi redimensionador [$base-star-i] y añado la unidad de medida al final. Si como trabajo con una lista sin especificaciones de medida, entonces es más fácil darle una unidad de medida cualquiera
    font-size: calc($font * $base-start-i) + rem;
  }

  // esto me mostrará los valores de la lista que se asignan al font-size de las clases .fs-1rem, .fs-2rem, .fs-3rem
  @debug "El $font está en el indice #{$font} y equivale a: #{inspect($font)}";
  
  
  // bucle que se repite desde el 1 hasta el 19
  @for $var from 0 to 20 {
    
    // lista que funciona como número aunque tenga colores
    $list-colors: white, black;
  
    // redimensionar. En este caso, si como jugamos con opacidades y necesitamos un redimensionamiento que vaya desde 0 hasta 1, le pondremos el valor más alto para que vaya disminuyendo su opacidad a medida que avanza desde el 1 hasta el 19
    $opacidad-base: 5;

    // bucle que itera con un indice dentro de una lista
    @each $i-colors in $list-colors {

      // index(la lista, el indice) = indice
      $oscuridad: index($list-colors, $i-colors);

      // nueva variable con interpolación del nombre de la variable correspondiente al índice del bucle, podría ser $i-color o $var
      .box-#{$var} {
        // darken([indice que itera dentro de una lista / color en especial], [número en porcentaje o en cualquier medida / la iteración de un bucle @for])
        background-color: darken($i-colors, $opacidad-base * $var);

        // lighten(funciona igual que lighten)
        color: lighten($i-colors, $opacidad-base * $var);
      }
      
      // debug que me dará el nombre de mi variable
      @debug "La $oscuridad está en el indice #{$oscuridad} y equivale a: .fs-#{$i}rem.box-#{$var}";
    }

    // condicional
    @if $var == 10 {
      .fs-#{$i}rem.box-#{$var} {
        background-color: blue;
        color: red;
      }
    }
  }
}

// **************** PAGINA **************** //
body {
  @extend .body;

  > div.lienzo-y-border-red {
    @extend .lienzo-principal;

    & h1 {
      @extend .h1;
      + h2 {
        @extend %h2;
      }
    }

    > section.article-container {
      @extend .article-container;

      > article.p {
        @extend .center-writing;

        > p.inside-mini-box1 {
          @include p(var(--letter-red), var(--border-green));
        }
        > p.inside-mini-box2 {
          @include p(var(--letter-blue), var(--border-green));
        }
        > p.inside-mini-box3 {
          @include p(var(--letter-red), var(--border-green));
        }
        > p.inside-mini-box4 {
          @include p(var(--letter-blue), var(--border-green));
        }
      }

      + section.article-container {
        @extend .article-container;
        div {
          @extend .linea-de-cajitas;
        }
      }

      + section.article-container {
        @extend .article-container;

        article.p-ultimo-box {
          @extend .ultimo-box-grande;
        }
      }
    }
  }
}
